import pandas as pd
import numpy as np
import tensorflow as tf
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout
from tensorflow.keras.utils import to_categorical

# 1. Load Dataset
# Replace with your own dataset path
data_path = "crime_data.csv"
data = pd.read_csv(data_path)

# Example structure: 'Crime_Type', 'Location', 'Time', 'Weather', 'Other_Features', 'Occurred'
# 'Occurred' is the target (1 = crime occurred, 0 = no crime)

# 2. Preprocess Data
# Convert categorical data to numerical using LabelEncoder
label_encoders = {}
for column in ['Crime_Type', 'Location', 'Weather']:
    label_encoders[column] = LabelEncoder()
    data[column] = label_encoders[column].fit_transform(data[column])

# Split features and target
X = data.drop('Occurred', axis=1)
y = data['Occurred']

# Normalize features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Convert target to categorical for classification
y_categorical = to_categorical(y)

# Split into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y_categorical, test_size=0.2, random_state=42)

# 3. Build Deep Learning Model
model = Sequential([
    Dense(128, input_dim=X_train.shape[1], activation='relu'),
    Dropout(0.3),
    Dense(64, activation='relu'),
    Dropout(0.3),
    Dense(y_train.shape[1], activation='softmax')  # For binary classification, use sigmoid instead
])

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

# 4. Train the Model
history = model.fit(X_train, y_train, epochs=50, batch_size=32, validation_split=0.2)

# 5. Evaluate the Model
loss, accuracy = model.evaluate(X_test, y_test)
print(f"Test Accuracy: {accuracy * 100:.2f}%")

# 6. Predict New Data
new_data = np.array([[1, 5, 2, 0.8, 0.3]])  # Example new data (normalized or preprocessed)
new_data_scaled = scaler.transform(new_data)
prediction = model.predict(new_data_scaled)
predicted_class = np.argmax(prediction, axis=1)
print(f"Predicted Crime Occurrence: {'Yes' if predicted_class[0] == 1 else 'No'}")

